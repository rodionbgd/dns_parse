#define CATCH_CONFIG_MAIN

#include "catch2/catch.hpp"

#include <cstdint>
#include <cstring>
#include "dns_parser.h"
#include <arpa/inet.h>

uint8_t packet[2][512] = {
    {0x9f, 0x85, 0x81, 0x80, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x64, 0x32, 0x6e, 0x78, 0x71, 0x32,
     0x75, 0x61, 0x70, 0x38, 0x38, 0x75, 0x73, 0x6b, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x72, 0x6f, 0x6e, 0x74,
     0x03, 0x6e, 0x65, 0x74, 0x00, 0x00, 0x1c, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25,
     0x00, 0x10, 0x26, 0x00, 0x90, 0x00, 0x21, 0x18, 0xba, 0x00, 0x00, 0x0a, 0xda, 0x5e, 0x79, 0x00, 0x93, 0xa1, 0xc0,
     0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x10, 0x26, 0x00, 0x90, 0x00, 0x21, 0x18, 0x12, 0x00,
     0x00, 0x0a, 0xda, 0x5e, 0x79, 0x00, 0x93, 0xa1, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00,
     0x10, 0x26, 0x00, 0x90, 0x00, 0x21, 0x18, 0x24, 0x00, 0x00, 0x0a, 0xda, 0x5e, 0x79, 0x00, 0x93, 0xa1, 0xc0, 0x0c,
     0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x10, 0x26, 0x00, 0x90, 0x00, 0x21, 0x18, 0xaa, 0x00, 0x00,
     0x0a, 0xda, 0x5e, 0x79, 0x00, 0x93, 0xa1, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x10,
     0x26, 0x00, 0x90, 0x00, 0x21, 0x18, 0xf4, 0x00, 0x00, 0x0a, 0xda, 0x5e, 0x79, 0x00, 0x93, 0xa1, 0xc0, 0x0c, 0x00,
     0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x10, 0x26, 0x00, 0x90, 0x00, 0x21, 0x18, 0x44, 0x00, 0x00, 0x0a,
     0xda, 0x5e, 0x79, 0x00, 0x93, 0xa1, 0xc0, 0x0c, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x10, 0x26,
     0x00, 0x90, 0x00, 0x21, 0x18, 0x1a, 0x00, 0x00, 0x0a, 0xda, 0x5e, 0x79, 0x00, 0x93, 0xa1, 0xc0, 0x0c, 0x00, 0x1c,
     0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x10, 0x26, 0x00, 0x90, 0x00, 0x21, 0x18, 0xbe, 0x00, 0x00, 0x0a, 0xda,
     0x5e, 0x79, 0x00, 0x93, 0xa1},
    {0x66, 0xa0, 0x81, 0x80, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x08, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65,
     0x74, 0x73, 0x03, 0x63, 0x64, 0x6e, 0x07, 0x6d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x03, 0x6e, 0x65, 0x74, 0x00,
     0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x1c, 0x0e, 0x64, 0x32,
     0x32, 0x38, 0x7a, 0x39, 0x31, 0x61, 0x75, 0x31, 0x31, 0x75, 0x6b, 0x6a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66,
     0x72, 0x6f, 0x6e, 0x74, 0xc0, 0x21, 0xc0, 0x36, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x13, 0x00, 0x04, 0x34,
     0x55, 0x2f, 0x34, 0xc0, 0x36, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x13, 0x00, 0x04, 0x34, 0x55, 0x2f, 0x4d,
     0xc0, 0x36, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x13, 0x00, 0x04, 0x34, 0x55, 0x2f, 0x78, 0xc0, 0x36, 0x00,
     0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x13, 0x00, 0x04, 0x34, 0x55, 0x2f, 0x52},
};

uint16_t dns_length[] = {271, 146};

TEST_CASE("Поле name", "[DNS]") {
    DNS dns = {};

    dns_handle(packet[0], dns_length[0], &dns);
    REQUIRE(strcmp(dns.name, "d2nxq2uap88usk.cloudfront.net") == 0);
    dns_handle(packet[1], dns_length[1], &dns);
    REQUIRE(strcmp(dns.name, "snippets.cdn.mozilla.net") == 0);
}

TEST_CASE("Тип AAAA поля ip", "[DNS]") {
    DNS dns = {};
    uint8_t ip[MAX_IP_LENGTH];
    uint8_t ip_length;
    dns_handle(packet[0], 271, &dns);

    ip_length = dns.ip_type[0] == AF_INET ? 4 : 16;
    memcpy(ip, packet[0] + 59, MAX_IP_LENGTH);
    REQUIRE(memcmp(dns.ip[0], ip, ip_length) == 0);
    REQUIRE(dns.ip_type[0] == AF_INET6);

    ip_length = dns.ip_type[1] == AF_INET ? 4 : 16;
    memcpy(ip, packet[0] + 87, MAX_IP_LENGTH);
    REQUIRE(memcmp(dns.ip[1], ip, ip_length) == 0);
    REQUIRE(dns.ip_type[1] == AF_INET6);

    ip_length = dns.ip_type[2] == AF_INET ? 4 : 16;
    memcpy(ip, packet[0] + 115, MAX_IP_LENGTH);
    REQUIRE(memcmp(dns.ip[2], ip, ip_length) == 0);
    REQUIRE(dns.ip_type[2] == AF_INET6);

    ip_length = dns.ip_type[3] == AF_INET ? 4 : 16;
    memcpy(ip, packet[0] + 143, MAX_IP_LENGTH);
    REQUIRE(memcmp(dns.ip[3], ip, ip_length) == 0);
    REQUIRE(dns.ip_type[3] == AF_INET6);
}

TEST_CASE("Тип A поля ip", "[DNS]") {
    DNS dns = {};
    uint8_t ip[MAX_IP_LENGTH];
    uint8_t ip_length;
    dns_handle(packet[1], 187, &dns);

    ip_length = dns.ip_type[0] == AF_INET ? 4 : 16;
    memcpy(ip, packet[1] + 94, MAX_IP_LENGTH);
    REQUIRE(memcmp(dns.ip[0], ip, ip_length) == 0);
    REQUIRE(dns.ip_type[0] == AF_INET);

    ip_length = dns.ip_type[2] == AF_INET ? 4 : 16;
    memcpy(ip, packet[1] + 126, MAX_IP_LENGTH);
    REQUIRE(memcmp(dns.ip[2], ip, ip_length) == 0);
    REQUIRE(dns.ip_type[2] == AF_INET);
}
